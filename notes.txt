git CSSJM/和git CSSJM 测试没区别
如果在github上手动添加了文件 本地再上传时会报错 
因为remote repository上有东西更新了但是local repository 没有更新而造成提交失败，
此时需要git pull origin master

css3
关键帧技术
css字体不生效：注意编码

html5 
web audios api
canvas
轮播序列帧

css链接也是相当于直接替换

js
类 封装
函数视为构造函数（也是类），new创造新对象
类方法：只有类可以调用（对象不能调用）
对象方法/属性：this.xxx各对象私有
原型方法/属性：类名.prototype.xxx各对象共享（类不能调用）
new操作相当于运行了“构造函数”（创建变量空间、运行语句等）
构造函数：每一个函数都自动拥有一个prototype属性 该属性拥有一个不可枚举的constructor属性，值为该函数

对于原型属性和原型方法如：
function cat(){
}
cat.prototype={
	food:"fish",
	say: function(){
	alert("I love "+this.food);
	}
}
blackCat=new cat();
可以通过blackCat.food直接访问原型属性，但不能通过blackCat.food="xxx"来更改（只是新建了普通的food属性）,
只能通过blackCat.__proto__.food="xxx"来实现。
当原型属性出现变化时，由于所有的实例对象原型属性都指向一个空间，因此所有实例的值都会被改变



参考链接：
http://group.cnblogs.com/topic/37998.html
http://www.2cto.com/kf/201402/281841.html
http://www.cnblogs.com/yjf512/archive/2011/06/03/2071914.html
http://www.cnblogs.com/RitaRichard/archive/2011/10/12/2208902.html
http://zhidao.baidu.com/link?url=dBznsjIC8H2u1PafouzoYtGjpGk2gssABoXZkl97-FsBhWPRKPlAT1I7md3W3aaO8JjxLsyO3fGrj71drt7HODseBVYBTsGAMPFtbtNAZ6K
变量声明：
var a=1,
	b=2;声明两个变量
var a=1;
	b=2;
	js中 允许在定义变量的时候 不加var 修饰符。
	js会在当前作用域下寻找上下文是否定义了此变量， 如果没有找到则会为这个变量分配内存。
	当且将其视为window的成员。 也就是全局变量。

	如果加了var 修饰符。 js会重新为这个变量分配内存，不论当前上下文中是否已经定义过了。
	这个变量的作用域就为当前上下文。 即局部变量。

	不加var的写法是强烈不推荐的。
	1. 语义不清楚。 
	2. 团队开发时，容易覆盖掉其它作用域内的变量，引发异常。
	3. 给window对象添加不必要成员。 
	
window对象：
JavaScript中的任何一个全局函数或全局变量（局部的不是）都是window的属性。
你的全局变量，或者函数，可以覆盖 window 对象的变量或者函数。
参考链接：
http://www.cnblogs.com/kissdodog/archive/2013/01/01/2841464.html

关于函数写法：
http://zhidao.baidu.com/link?url=dQS7GAGJFANCWBMKi7yT04KLEkp2tdyDcmgWPrASOSNJiqFZgdwSBPW0XLC4wBhcEp6-4SWqTdjM204xK84OkSuRAWJIMqexwHgMOxrhg2S

JS执行顺序
加载顺序就是按js出现在html里的先后顺序（注意顺序，否则易出现xxx未定义）
执行时同一个块里的所有定义语句（不会出现函数等未定义）先执行 然后再按顺序执行其他语句
与事件绑定的语句在触发时才解析和执行

当浏览器遇到<script> 标记的时候，浏览器会执行之间的javascript代码。嵌入的js代码是顺序执行的，每个脚本定义的全局变量和函数，都可以被后面执行的脚本所调用。 变量的调用，必须是前面已经声明，否则获取的变量值是undefined。

三个单位：px em rem
PX特点

1. IE无法调整那些使用px作为单位的字体大小；

2. 国外的大部分网站能够调整的原因在于其使用了em或rem作为字体单位；

3. Firefox能够调整px和em，rem，但是96%以上的中国网民使用IE浏览器(或内核)。

px像素（Pixel）。相对长度单位。像素px是相对于显示器屏幕分辨率而言的。(引自CSS2.0手册)

em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。(引自CSS2.0手册)

       任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合: 1em=16px。那么12px=0.75em,10px=0.625em。为了简化font-size的换算，需要在css中的body选择器中声明Font-size=62.5%，这就使em值变为 16px*62.5%=10px, 这样12px=1.2em, 10px=1em, 也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。

EM特点 

1. em的值并不是固定的；
相对长度单位。相对于当前对象内文本的字体尺寸。
如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。

2. em会继承父级元素的字体大小。

所以我们在写CSS的时候，需要注意两点：

1. body选择器中声明Font-size=62.5%；

2. 将你的原来的px数值除以10，然后换上em作为单位；

3. 重新计算那些被放大的字体的em数值。避免字体大小的重复声明。

       也就是避免1.2 * 1.2= 1.44的现象。比如说你在#content中声明了字体大小为1.2em，那么在声明p的字体大小时就只能是1em，而不是1.2em, 因为此em非彼em，它因继承#content的字体高而变为了1em=12px。
	   
	   
rem特点 

        rem是CSS3新增的一个相对单位（root em，根em），这个单位引起了广泛关注。这个单位与em有什么区别呢？区别在于使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了IE8及更早版本外，所有浏览器均已支持rem。对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。下面就是

一个例子：
p {font-size:14px; font-size:.875rem;}


z-index详解
http://www.cnblogs.com/ForEvErNoME/p/3373641.html
若子元素z-index失效 则需给父元素设置z-index值
z-index值不是auto的时候，会创建层叠上下文。

CSS3：
CSS3给我们带来了什么好处呢？简单的说，CSS3把很多以前需要使用图片和脚本来实现的效果、甚至动画效果，只需要短短几行代码就能搞定。比如圆角，图片边框，文字阴影和盒阴影，过渡、动画等。

CSS3简化了前端开发工作人员的设计过程，加快页面载入速度。
CSS3能做什么？
CSS3给我们带来了什么好处呢？简单的说，CSS3把很多以前需要使用图片和脚本来实现的效果、甚至动画效果，只需要短短几行代码就能搞定。比如圆角，图片边框，文字阴影和盒阴影，过渡、动画等。

CSS3简化了前端开发工作人员的设计过程，加快页面载入速度。

在CSS3可用的前提下，当然是CSS3了，不过H5的requestAnimationFrame也可以在可用的前提下使用；
移动端最好CSS3,3d硬件加速，像jquery的animate直接淘汰了；
当然，H5、CSS3都不支持的情况，只能JS上了；或者判断兼容性，弄几套方案；

CSS3都有哪些强大功能呢？各位小伙伴们先来一睹为快吧！

选择器
以前我们通常用class、 ID 或 tagname 来选择HTML元素，CSS3的选择器强大的难以置信。它们可以减少在标签中的class和ID的数量更方便的维护样式表、更好的实现结构与表现的分离。
 

圆角效果
以前做圆角通常使用背景图片，或繁琐的元素拼凑，现在很简单了 border-radius 帮你轻松搞定。

 

块阴影与文字阴影
可以对任意DIV和文字增加投影效果。

 

色彩
CSS3支持更多的颜色和更广泛的颜色定义。新颜色CSS3支持HSL ， CMYK ，HSLA and RGBA。
 

渐变效果
以前只能用Photoshop做出的图片渐变效果，现在可以用CCS写出来了。IE中的滤镜也可以实现。

 

个性化字体
网页上的字体太单一？使用@Font-Face 轻松实现定制字体。

 

多背景图
一个元素上添加多层背景图片。

 

边框背景图
边框应用背景图片。
 

变形处理
你可以对HTML元素进行旋转、缩放、倾斜、移动、甚至以前只能用JavaScript实现的强大动画。

 

多栏布局
可以让你不用使用多个div标签就能实现多栏布局。浏览器解释这个属性并生成多栏，让文本实现一个仿报纸的多栏结构。

 

媒体查询
针对不同屏幕分辨率，应用不同的样式。

等等 ……

很神奇吧！CSS3使代码更简洁、更高效。可以极大的提高工作效率，打造更高级的用户体验。使web应用的界面设计进入一个新的台阶。


多类：效果类、基本类等等


作用域：
for循环不是闭包
函数是闭包
全局变量和全局函数都是window对象的属性，调用时可省略window.

从作用域链的结构可以看出，在运行期上下文的作用域链中，标识符所在的位置越深，读写速度就会越慢。如上图所示，因为全局变量总是存在于运行期上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。一个好的经验法则是：如果一个跨作用域的对象被引用了一次以上，则先把它存储到局部变量里再使用。


关于setTimeout等函数，应该使用setTimeout(function(){f(x);},xxx);若写为setTimeout(f(x),xxx)则会直接执行f不会延迟，并且若是setInterval只会执行一次

删除对象的属性 用delete A['X']


由于浏览器自身有缓存机制 通过script标签解决跨域问题时只有第一次是实时数据 后面（缓存时间内）都是本地数据

对于table若不加tbody则浏览器会自动帮你加上，当出现多个tbody（或thead tfoot）时，浏览器会分开渲染，样式变得不可控，解决办法是自己加上这些标签控制样式

HTML本地存储
sessionStorage以键值对存储，并且值是字符串

inline-block无法设置margin:auto

行内元素与块级函数的三个区别
1.行内元素与块级元素直观上的区别

    行内元素会在一条直线上排列，都是同一行的，水平方向排列

    块级元素各占据一行，垂直方向排列。块级元素从新行开始结束接着一个断行。

2.块级元素可以包含行内元素和块级元素。行内元素不能包含块级元素。

3.行内元素与块级元素属性的不同，主要是盒模型属性上

行内元素设置width无效，height无效(可以设置line-height)，margin上下无效

当行内元素内容为多行时，相当于将行内元素截断成多行（实际上为一行，表现为多行），多行间默认会有空隙，
但还是按一行来渲染，如margin-left只对首行生效，backgound在行间会产生空隙等
解决办法：display设置为inline-block或block或者将父元素display设置为flex(margin:auto能生效)

margin百分比值（无论方向）时都是以父元素width值为参考的

关于结束标签
HTML 与 XHTML 之间的差异
在 HTML 中，<br> 标签没有结束标签。
在 XHTML 中，<br> 标签必须被正确地关闭，比如这样：<br />。
请使用 <br> 来输入空行，而不是分割段落。

SVG(作为资源使用 而不是作为图像标签)
SVG标签(包括其子标签)都可以像普通的标签一样使用 并设置id class css 等属性，并且css优先级等判断方法与普通标签一样
你甚至可以对SVG元素使用:hover语法。但请注意，有个别的CSS属性对SVG是不起作用的。
例如，background-color对SVG就是无效的，因为SVG里使用fill属性。
<svg  id="mysvg" xmlns="http://www.w3.org/2000/svg" version="1.1">
	<circle class="mycircle" cx="100" cy="50" r="40" stroke="black" stroke-width="2" fill="red"/>
</svg>

在标签中引入svg时 svg大小可进行缩放(由用户设置决定，如本来设置60x60，若用户设置30x30大小则缩小一倍，
若不设置则为60x60，与普通图像一样)
<img width="300" height="300"  style="width:50px;height:50px;"  src="http://www.w3school.com.cn/svg/circle1.svg"  alt="svg图像"/>
另外 对于有width和height属性的标签 优先级 内联样式>内部样式>属性

inline-block对齐问题
两个inline-block的元素中间会根据浏览器的不同，会存在8px左右的空白，就是常说的浏览器兼容性，不利于排版。
所以类似这样的并排元素，还是使用float更好。
也可以使用：vertical-line:top 使用inline-block元素的时候要注意这一点

一、HTML 标签包括 块级元素(block)、内嵌元素（inline）

　　1、块级元素

　　一般用来搭建网站架构、布局、承载内容……它包括以下这些标签：

　　address、blockquote、center、dir、div、dl、dt、dd、fieldset、form、h1~h6、hr、isindex、menu、noframes、noscript、ol、p、pre、table、ul

　　2、内嵌元素

　　一般用在网站内容之中的某些细节或部位，用以“强调、区分样式、上标、下标、锚点”等等，下面这些标签都属于内嵌元素：

　　a、abbr、acronym、b、bdo、big、br、cite、code、dfn、em、font、i、img、input、kbd、label、q、s、samp、select、small、span、strike、strong、sub、sup、textarea、tt、u、var

　　二、HTML 标签的嵌套规则

　　1. 块元素可以包含内联元素或某些块元素，但内联元素却不能包含块元素，它只能包含其它的内联元素：

　　<div><h1></h1><p></p></div> ―― 对

　　<a href=”#”><span></span></a> ―― 对

　　<span><div></div></span> ―― 错

　　2. 块级元素不能放在<p>里面：

　　<p><ol><li></li></ol></p> ―― 错

　　<p><div></div></p> ―― 错

　　3. 有几个特殊的块级元素只能包含内嵌元素，不能再包含块级元素，这几个特殊的标签是：

　　h1、h2、h3、h4、h5、h6、p、dt
	pre是块元素，不能放在P标签里面 code是内联元素

　　4. li 内可以包含 div 标签 ―― 这一条其实不必单独列出来的，但是网上许多人对此有些疑惑，就在这里略加说明：

　　li 和 div 标 签都是装载内容的容器，地位平等，没有级别之分（例如：h1、h2 这样森严的等级制度^_^），要知道，li 标签连它的父级 ul 或者是 ol 都 可以容纳的，为什么有人会觉得 li 偏偏容纳不下一个 div 呢？别把 li 看得那么小气嘛，别看 li 长得挺瘦小，其实 li 的胸襟很大 滴……

　　5. 块级元素与块级元素并列、内嵌元素与内嵌元素并列：

　　<div><h2></h2><p></p></div> ―― 对

　　<div><a href=”#”></a><span></span></div> ―― 对

　　<div><h2></h2><span></span></div> ―― 错


css继承

一、无继承性的属性

1、display：规定元素应该生成的框的类型

2、文本属性：

vertical-align：垂直文本对齐

text-decoration：规定添加到文本的装饰

text-shadow：文本阴影效果

white-space：空白符的处理

unicode-bidi：设置文本的方向

3、盒子模型的属性：width、height、margin 、margin-top、margin-right、margin-bottom、margin-left、border、border-style、border-top-style、border-right-style、border-bottom-style、border-left-style、border-width、border-top-width、border-right-right、border-bottom-width、border-left-width、border-color、border-top-color、border-right-color、border-bottom-color、border-left-color、border-top、border-right、border-bottom、border-left、padding、padding-top、padding-right、padding-bottom、padding-left

4、背景属性：background、background-color、background-image、background-repeat、background-position、background-attachment

5、定位属性：float、clear、position、top、right、bottom、left、min-width、min-height、max-width、max-height、overflow、clip、z-index

6、生成内容属性：content、counter-reset、counter-increment

7、轮廓样式属性：outline-style、outline-width、outline-color、outline

8、页面样式属性：size、page-break-before、page-break-after

9、声音样式属性：pause-before、pause-after、pause、cue-before、cue-after、cue、play-during

 

二、有继承性的属性

1、字体系列属性

font：组合字体

font-family：规定元素的字体系列

font-weight：设置字体的粗细

font-size：设置字体的尺寸

font-style：定义字体的风格

font-variant：设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小。

font-stretch：对当前的 font-family 进行伸缩变形。所有主流浏览器都不支持。

font-size-adjust：为某个元素规定一个 aspect 值，这样就可以保持首选字体的 x-height。

2、文本系列属性

text-indent：文本缩进

text-align：文本水平对齐

line-height：行高

word-spacing：增加或减少单词间的空白（即字间隔）

letter-spacing：增加或减少字符间的空白（字符间距）

text-transform：控制文本大小写

direction：规定文本的书写方向

color：文本颜色

3、元素可见性：visibility

4、表格布局属性：caption-side、border-collapse、border-spacing、empty-cells、table-layout

5、列表布局属性：list-style-type、list-style-image、list-style-position、list-style

6、生成内容属性：quotes

7、光标属性：cursor

8、页面样式属性：page、page-break-inside、windows、orphans

9、声音样式属性：speak、speak-punctuation、speak-numeral、speak-header、speech-rate、volume、voice-family、pitch、pitch-range、stress、richness、、azimuth、elevation

 

三、所有元素可以继承的属性

1、元素可见性：visibility

2、光标属性：cursor

 

四、内联元素可以继承的属性

1、字体系列属性

2、除text-indent、text-align之外的文本系列属性

 

五、块级元素可以继承的属性

1、text-indent、text-align

float:
浮动元素会生成一个块级框，而不论它本身是何种元素。

脱离文档流都会变成块级元素 


实时触发滑块
onchange在失去焦点时才触发，oninput实时触发


<svg>标签可以指定background

border-radius并不是border的子属性

float：left 第二行靠右
仅依靠float不能完全实现参差布局，float原理应该是将元素将会脱离当前文档流，移到容器的边缘或者移到前一个float元素的边缘（仅对行内元素有效）。如果空隙不够的话，元素会自行向下移动直到足够放下，同时默认会向左边对齐，直到左边遇到阻挡为止。因此，元素在第二行重排会受到第一行最高元素的限制，如果上一行元素最高位是X位，则此行会从X+1位开始排列。如果最高位是上一行最后列，则下一行会从第一列开始排列，但是在两行之间会产生大量空隙，无法形成紧密状态。

calc()前不能有负号 负号是给数字的不是给带单位的值的


渐变深入探究：
1 渐变横线线（推进线）是垂直于渐变方向的 沿对角线的渐变并不能将块从对角线对半分（菱形除外）
2 渐变方向线可以向元素外延长 最大为100%（与两个对角相切） 即充满整个元素
3 top bottom 等方向并不是对角线的方向 而是垂直于对角线的方向

display: none 仍在dom树中 但不在render树种 会丧失可访问性（所有用户均不可见）
/*不影响和不用于呈现的节点不包含在render树中*/
使用absolute加clip可不损失访问性
原则：
它应使元素消失（仿佛文档中不存在该元素）
这意味着应该没有多余的空白、没有滚动条、不能出现与层叠相关的问题（不可点击）等。
当隐藏容器中的元素获得焦点时，应防止出现意外的滚动。
也就是说，当用户使用tab导航到隐藏容器内的可聚焦的元素时，网页不应该跳跃。
双向（bidi）字符集语言友好。 
即该技术应该同时支持从右到左，从左到右的界面，如阿拉伯文和希伯来文。

回流影响布局 重绘不影响布局

层叠：http://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/
翻译成术语就是：普通元素的层叠水平优先由层叠上下文决定，因此，层叠水平的比较只有在当前层叠上下文元素中才有意义。
需要注意的是，诸位千万不要把层叠水平和CSS的z-index属性混为一谈。没错，某些情况下z-index确实可以影响层叠水平，但是，只限于定位元素以及flex盒子的孩子元素；而层叠水平所有的元素都存在。

位于最低水平的border/background指的是层叠上下文元素的边框和背景色。
每一个层叠顺序规则适用于一个完整的层叠上下文元素。
原图没有呈现inline-block的层叠顺序，实际上，inline-block和inline水平元素是同等level级别。
z-index:0实际上和z-index:auto单纯从层叠水平上看，是可以看成是一样的。
注意这里的措辞――“单纯从层叠水平上看”，实际上，两者在层叠上下文领域有着根本性的差异。

诸如border/background一般为装饰属性，而浮动和块状元素一般用作布局，而内联元素都是内容。网页中最重要的是什么？当然是内容了哈，对不对！因此，一定要让内容的层叠顺序相当高，当发生层叠是很好，重要的文字啊图片内容可以优先暴露在屏幕上

层叠发生在层叠上下文元素中 判断层叠时先找对应的层叠上下文元素
所有元素都有z-index值 且默认为auto 但z-index设置数值时仅能在定位元素上奏效

绝对定位和固定定位overflow是相对于定位基准元素的 相对定位overflow相对于父元素
overflow不看层叠上下文关系 只看定位关系

文档流是相对于盒子模型讲的

* 注意: 
* 1. CSS作用的是盒子(Box), 而不是元素(Element);
* 2. JS无法直接操作盒子。

形成bfc之后 元素成为独立王国
触发BFC：
float的值不为none。
overflow的值不为visible。
display的值为table-cell, table-caption, inline-block中的任何一个。
position的值不为relative和static。
　
BFC 定义：
BFC(Block formatting context)直译为"块级格式化上下文"。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。(但不会改变其他的规则 如fixed定位等)

内部的Box会在垂直方向，一个接一个地放置。
Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠
每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。
BFC的区域不会与float box重叠。
BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。
计算BFC的高度时，浮动元素也参与计算

clear只是清除浮动对自己的影响 并不会改变其他元素的属性

浮动层：给元素的float属性赋值后，就是脱离文档流，进行左右浮动，紧贴着父元素(默认为body文本区域)的左右边框。
而此浮动元素在文档流空出的位置，由后续的(非浮动)元素填充上去：块级元素直接填充上去，
若跟浮动元素的范围发生重叠，浮动元素覆盖块级元素。内联元素：有空隙就插入。

浮动元素脱离文档流后 遇到前面有块级元素、边界或另一个浮动元素才会停止
内联元素或文字会被浮动元素挤开

清除浮动只是不受浮动元素的影响 即认为他们没有脱离文档流

浮动元素的margin设置是生效的 只是因为脱离文档流看不出效果 在遇到BFC时效果就会显现出来

/*列表前的点只是装饰 不占位 当padding变小时 点会挤到外面去*/

伪元素不在dom中 无法添加类（hover也不行） 没有dom方法

CSS中的元素尺寸分为两类，一类叫做“内部尺寸”，英文写作”Intrinsic Sizing”，尺寸由内部元素决定；还有一类叫做“外部尺寸”，英文写作”Extrinsic Sizing”，宽度由外部元素决定。

box-shadow 模糊原理即是模糊算法 对整块采用指定的模糊半径进行处理 对边界和内部也是如此
			因此边界外部会有半径大小的模糊区域
			
以父元素的百分比为长度时 父元素不一定要显示指定长度 只看实际长度即可（撑开的也行）


在元素内部移动时 有时会触发多次hover？ no 一定是其他问题！

关于&nbsp大小不同浏览器大小不一致的问题：
是由于默认字体不一样导致的 将字体设为统一即可

页面根元素――html元素 形成BFC 但overflow值是visible不是auto 
body的overflow默认值为visible(在f和c浏览器上都已证明)故无法建立BFC，元素出现坍缩
propagated to the viewport: 传播到视口 如（html、body的）背景颜色和滚动条

视口滚动条出现机制 不同浏览器是不一致的 firefox正常 chrome较为奇怪

视口本身有overflow的默认值auto，但当html和body的overflow取非默认值（visible）时 会传播到视口
这一点和背景色的传播十分类似

通过锚点改变滚动条是改变对应元素所在视区的滚动条 #所在的是视口区域

<doctype>
作用：声明文档的解析类型(document.compatMode)，避免浏览器的怪异模式。
 	document.compatMode：
		BackCompat：怪异模式，浏览器使用自己的怪异模式解析渲染页面。
		CSS1Compat：标准模式，浏览器使用W3C的标准解析渲染页面。
若无doctype 则使用浏览器各自默认的解析方式

<!DOCTYPE>声明位于位于HTML文档中的第一行，处于 <html> 标签之前。告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。
 

标准模式的排版 和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作。

所有的浏览器都需要两种模式：怪异模式和严格模式（也有人叫标准模式）。IE 6 for Windows/mac, Mozilla, Safari和Opera 都实现了这两种模式，但是IE 6以下版本永远定在了怪异模式。关于两种模式，你需要知道以下几点：

1、在标准化之前写的页面是没有doctype的，因此没有doctype的页面是在怪异模式下渲染的。
2、反过来说，如果web开发人员加入的doctype，说明他知道他所要做的事情，大部分的doctype会开启严格模式（标准模式），
	页面也会按照标准来渲染。
3、任何新的或者未知的doctype都会开启严格模式（标准模式）。
4、每个浏览器都有自己的方式来激活怪异模式。你可以看看这个清单：http://hsivonen.iki.fi/doctype/

border-box：
padding和border被包含在定义的width和height之内。对象的实际宽度就等于设置的width值，即使定义有border和padding也不会改变对象的实际宽度，即 ( Element width = width )
此属性表现为怪异模式下的盒模型。

HTML5 为什么只需要写 <!DOCTYPE HTML>？

HTML5 不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行）；

 而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。
 
 
 浏览器工作原理：
 有一些呈现对象对应于 DOM 节点，但在树中所在的位置与 DOM 节点不同。浮动定位和绝对定位的元素就是这样，它们处于正常的流程之外，
 放置在树中的其他地方，并映射到真正的框架，而放在原位的是占位框架。
 
 处理 html 和 body 标记就会构建呈现树根节点。这个根节点呈现对象对应于 CSS 规范中所说的容器 block，这是最上层的 block，包含了其他所有 block。它的尺寸就是视口，即浏览器窗口显示区域的尺寸。Firefox 称之为 ViewPortFrame，而 Webkit 称之为 RenderView。这就是文档所指向的呈现对象。呈现树的其余部分以 DOM 树节点插入的形式来构建。
 
 
 关于绝对定位的误区：
	当祖先元素找不到定位元素时，会先相对于滚动条在顶部时的视口定位，而不是相对于根元素定位。
	但需要注意的时，这并不是fixed定位，当滑动滚动条时，元素相对文档保持不变，
	当滚动条处于顶部时，相对视口位置不变
	
	
是行高撑开了容器 而不是文本

窗口过小时的收缩: 普通内容会收缩（即是设置了高度）margin padding和设置了min-height的

元素显示模糊主要是因为使用了transform3D变换,3D变换会开启GPU加速，GPU加速动画时，并不是把原生DOM传递给GPU，它生成一个元素图像，把该图像发送到GPU，GPU将图像应用为多边形纹理贴图代表元素，GPU可以流畅快速的对这些多边形进行旋转，缩放，转换，倾斜等变换，但由于只是传递元素图像到GPU进行处理，所以它并不能重新渲染内容，图像清晰度不能保证，元素显示清晰度自然就下降了。
2D并不会开启加速

jquery $(document).ready() 与window.onload的区别
1.执行时间 

        window.onload必须等到页面内包括图片的所有元素加载完毕后才能执行。 
        $(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。 

2.编写个数不同 

         window.onload不能同时编写多个，如果有多个window.onload方法，只会执行一个 
         $(document).ready()可以同时编写多个，并且都可以得到执行 

3.简化写法 

         window.onload没有简化写法 
         $(document).ready(function(){})可以简写成$(function(){});
		 
		 
关于百分比高度和宽度：
静态定位时
百分比宽度： 始终以父元素为基准
百分比高度： 当父元素设置了高度时（撑开的不算）以父元素为基准，否则以向上第一个有高度设置的元素或窗口为基准
绝对定位时 
百分比宽度：相对谁定位就以谁为基准
百分比高度：相对谁定位就以谁为基准


JS语法错误（解析错误）-终止运行 程序主动报错-继续运行后面的